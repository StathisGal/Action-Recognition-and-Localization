import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import numpy as np
import torchvision.models as models
from config import cfg
from roi_crop.functions.roi_crop import RoICropFunction
import cv2
import pdb
import random

np.set_printoptions(threshold=np.nan)
def save_net(fname, net):
    import h5py
    h5f = h5py.File(fname, mode='w')
    for k, v in net.state_dict().items():
        h5f.create_dataset(k, data=v.cpu().numpy())

def load_net(fname, net):
    import h5py
    h5f = h5py.File(fname, mode='r')
    for k, v in net.state_dict().items():
        param = torch.from_numpy(np.asarray(h5f[k]))
        v.copy_(param)

def weights_normal_init(model, dev=0.01):
    if isinstance(model, list):
        for m in model:
            weights_normal_init(m, dev)
    else:
        for m in model.modules():
            if isinstance(m, nn.Conv2d):
                m.weight.data.normal_(0.0, dev)
            elif isinstance(m, nn.Linear):
                m.weight.data.normal_(0.0, dev)


def clip_gradient(model, clip_norm):
    """Computes a gradient clipping coefficient based on gradient norm."""
    totalnorm = 0
    for p in model.parameters():
        if p.requires_grad:
            modulenorm = p.grad.data.norm()
            totalnorm += modulenorm ** 2
    totalnorm = torch.sqrt(totalnorm).item()
    norm = (clip_norm / max(totalnorm, clip_norm))
    for p in model.parameters():
        if p.requires_grad:
            p.grad.mul_(norm)

def vis_detections(im, class_name, dets, thresh=0.8):
    """Visual debugging of detections."""
    for i in range(np.minimum(10, dets.shape[0])):
        bbox = tuple(int(np.round(x)) for x in dets[i, :4])
        score = dets[i, -1]
        if score > thresh:
            cv2.rectangle(im, bbox[0:2], bbox[2:4], (0, 204, 0), 2)
            cv2.putText(im, '%s: %.3f' % (class_name, score), (bbox[0], bbox[1] + 15), cv2.FONT_HERSHEY_PLAIN,
                        1.0, (0, 0, 255), thickness=1)
    return im


def adjust_learning_rate(optimizer, decay=0.1):
    """Sets the learning rate to the initial LR decayed by 0.5 every 20 epochs"""
    for param_group in optimizer.param_groups:
        param_group['lr'] = decay * param_group['lr']


def save_checkpoint(state, filename):
    torch.save(state, filename)

def _smooth_l1_loss(bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights, sigma=1.0, dim=[1]):

    # print('-----\nInside _smooth_l1_loss')
    sigma_2 = sigma ** 2
    # nan_values = bbox_targets != bbox_targets
    # bbox_targets[nan_values] = 1e-5 ## because nan appears

    box_diff = bbox_pred - bbox_targets

    # print(box_diff.detach().cpu().numpy())
    # nan_values = box_diff != box_diff
    # box_diff[nan_values] = 1e-5 ## because nan appears

    in_box_diff = bbox_inside_weights * box_diff
    # print('in_box_diff :',in_box_diff)
    abs_in_box_diff = torch.abs(in_box_diff)
    smoothL1_sign = (abs_in_box_diff < 1. / sigma_2).detach().float()
    in_loss_box = torch.pow(in_box_diff, 2) * (sigma_2 / 2.) * smoothL1_sign \
                  + (abs_in_box_diff - (0.5 / sigma_2)) * (1. - smoothL1_sign)
    out_loss_box = bbox_outside_weights * in_loss_box
    # print('out_loss_box :',out_loss_box)
    loss_box = out_loss_box
    # print('edw loss_box.shape :',loss_box.shape)
    for i in sorted(dim, reverse=True):
      loss_box = loss_box.sum(i)
    loss_box = loss_box.mean()
    return loss_box

def _crop_pool_layer(bottom, rois, max_pool=True):
    # code modified from 
    # https://github.com/ruotianluo/pytorch-faster-rcnn
    # implement it using stn
    # box to affine
    # input (x1,y1,x2,y2)
    """
    [  x2-x1             x1 + x2 - W + 1  ]
    [  -----      0      ---------------  ]
    [  W - 1                  W - 1       ]
    [                                     ]
    [           y2-y1    y1 + y2 - H + 1  ]
    [    0      -----    ---------------  ]
    [           H - 1         H - 1      ]
    """
    rois = rois.detach()
    batch_size = bottom.size(0)
    D = bottom.size(1)
    H = bottom.size(2)
    W = bottom.size(3)
    roi_per_batch = rois.size(0) / batch_size
    x1 = rois[:, 1::4] / 16.0
    y1 = rois[:, 2::4] / 16.0
    x2 = rois[:, 3::4] / 16.0
    y2 = rois[:, 4::4] / 16.0

    height = bottom.size(2)
    width = bottom.size(3)

    # affine theta
    zero = Variable(rois.data.new(rois.size(0), 1).zero_())
    theta = torch.cat([\
      (x2 - x1) / (width - 1),
      zero,
      (x1 + x2 - width + 1) / (width - 1),
      zero,
      (y2 - y1) / (height - 1),
      (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)

    if max_pool:
      pre_pool_size = cfg.POOLING_SIZE * 2
      grid = F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))
      bottom = bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W)\
                                                                .contiguous().view(-1, D, H, W)
      crops = F.grid_sample(bottom, grid)
      crops = F.max_pool2d(crops, 2, 2)
    else:
      grid = F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))
      bottom = bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W)\
                                                                .contiguous().view(-1, D, H, W)
      crops = F.grid_sample(bottom, grid)
    
    return crops, grid

def _affine_grid_gen(rois, input_size, grid_size):

    rois = rois.detach()
    x1 = rois[:, 1::4] / 16.0
    y1 = rois[:, 2::4] / 16.0
    x2 = rois[:, 3::4] / 16.0
    y2 = rois[:, 4::4] / 16.0

    height = input_size[0]
    width = input_size[1]

    zero = Variable(rois.data.new(rois.size(0), 1).zero_())
    theta = torch.cat([\
      (x2 - x1) / (width - 1),
      zero,
      (x1 + x2 - width + 1) / (width - 1),
      zero,
      (y2 - y1) / (height - 1),
      (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)

    grid = F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))

    return grid

def _affine_theta(rois, input_size):

    rois = rois.detach()
    x1 = rois[:, 1::4] / 16.0
    y1 = rois[:, 2::4] / 16.0
    x2 = rois[:, 3::4] / 16.0
    y2 = rois[:, 4::4] / 16.0

    height = input_size[0]
    width = input_size[1]

    zero = Variable(rois.data.new(rois.size(0), 1).zero_())

    # theta = torch.cat([\
    #   (x2 - x1) / (width - 1),
    #   zero,
    #   (x1 + x2 - width + 1) / (width - 1),
    #   zero,
    #   (y2 - y1) / (height - 1),
    #   (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)

    theta = torch.cat([\
      (y2 - y1) / (height - 1),
      zero,
      (y1 + y2 - height + 1) / (height - 1),
      zero,
      (x2 - x1) / (width - 1),
      (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)

    return theta

def compare_grid_sample():
    # do gradcheck
    N = random.randint(1, 8)
    C = 2 # random.randint(1, 8)
    H = 5 # random.randint(1, 8)
    W = 4 # random.randint(1, 8)
    input = Variable(torch.randn(N, C, H, W).cuda(), requires_grad=True)
    input_p = input.clone().data.contiguous()
   
    grid = Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)
    grid_clone = grid.clone().contiguous()

    out_offcial = F.grid_sample(input, grid)    
    grad_outputs = Variable(torch.rand(out_offcial.size()).cuda())
    grad_outputs_clone = grad_outputs.clone().contiguous()
    grad_inputs = torch.autograd.grad(out_offcial, (input, grid), grad_outputs.contiguous())
    grad_input_off = grad_inputs[0]


    crf = RoICropFunction()
    grid_yx = torch.stack([grid_clone.data[:,:,:,1], grid_clone.data[:,:,:,0]], 3).contiguous().cuda()
    out_stn = crf.forward(input_p, grid_yx)
    grad_inputs = crf.backward(grad_outputs_clone.data)
    grad_input_stn = grad_inputs[0]
    pdb.set_trace()

    delta = (grad_input_off.data - grad_input_stn).sum()

def from_tubes_to_rois(tubes, sample_duration):

    batch_size = tubes.size(0)
    rois_per_image = tubes.size(1)

    rois_f = torch.zeros(batch_size, rois_per_image, sample_duration, 5).type_as(tubes)
    offset_batch = torch.arange(0,batch_size).type_as(tubes) * sample_duration
    offset = torch.arange(0,sample_duration).type_as(tubes)
    f_offset= offset.unsqueeze(0).expand(batch_size,sample_duration) + \
              offset_batch.unsqueeze(1).expand(batch_size,sample_duration)

    rois_f[:,:,:,0] = f_offset.unsqueeze(1).expand(batch_size, rois_per_image, sample_duration)

    # offset

    for b in range(batch_size):
        for i in range(rois_per_image):
            r = tubes[b,i]
            print('r :',r)
            inds = torch.arange(r[2].long(), (r[5]+1).long())
            print('inds :',inds ,' for r :',r)
            try:
                rois_f[b,i,inds,1:]= r[[0,1,3,4]]
            except:
                print('b :',b)
                print('i :',i)
                print('r[3] :',r[2])
                print('r[6] :',r[5])
                print('inds :',inds)
                print('r[[1,2,4,5] :',r)
                print('rois_f.shape :',rois_f.shape)
                raise ValueError('A very specific bad thing happened.')
    return rois_f.permute(0,2,1,3)

# if __name__ == "__main__":

#     [[[0.00000000e+00,6.00160141e+01,3.10780487e+01,4.14934158e-02
#    1.11000000e+02,7.91807556e+01,1.50000000e+01]
#   [0.00000000e+00,3.40000000e+01,2.10000000e+01,0.00000000e+00
#    8.30000000e+01,9.80000000e+01,1.50000000e+01]
#   [0.00000000e+00,6.40000000e+01,3.50000000e+01,0.00000000e+00
#    1.11000000e+02,9.70000000e+01,1.50000000e+01]
#   [0.00000000e+00,2.49503460e+01,5.63527756e+01,1.08715000e+01
#    8.79650040e+01,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,5.58110580e+01,8.74694252e+00,1.86288381e+00
#    1.11000000e+02,7.02782440e+01,9.83017921e+00]
#   [0.00000000e+00,3.93832092e+01,5.99213409e+00,2.98575139e+00
#    1.11000000e+02,1.11000000e+02,6.94366646e+00]
#   [0.00000000e+00,3.94865990e+01,2.32881203e+01,1.10405893e+01
#    1.02986740e+02,8.56589508e+01,1.50000000e+01]
#   [0.00000000e+00,3.99852982e+01,0.00000000e+00,9.93352890e-01
#    1.03962852e+02,5.45209770e+01,8.91554832e+00]
#   [0.00000000e+00,2.25755730e+01,0.00000000e+00,7.88920116e+00
#    1.11000000e+02,6.87975464e+01,1.50000000e+01]
#   [0.00000000e+00,9.11563110e+00,2.48259735e+01,4.00974751e+00
#    7.28216553e+01,8.79029694e+01,1.19461575e+01]
#   [0.00000000e+00,7.35229950e+01,8.86837959e+00,3.10461974e+00
#    1.11000000e+02,7.20844650e+01,1.09773741e+01]
#   [0.00000000e+00,2.58381691e+01,5.50126801e+01,1.19448032e+01
#    8.91736755e+01,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,3.99852982e+01,0.00000000e+00,9.93352890e-01
#    1.03962852e+02,5.45209770e+01,8.91554832e+00]
#   [0.00000000e+00,8.58035660e+00,7.20821381e+01,2.00235248e+00
#    7.09384918e+01,1.11000000e+02,9.85149956e+00]
#   [0.00000000e+00,5.57272568e+01,7.07932205e+01,2.02432036e+00
#    1.11000000e+02,1.11000000e+02,9.83167171e+00]
#   [0.00000000e+00,7.21127701e+01,8.53395653e+00,5.89982462e+00
#    1.11000000e+02,7.16044388e+01,1.36977654e+01]
#   [0.00000000e+00,6.97553024e+01,4.03064728e+01,0.00000000e+00
#    1.11000000e+02,1.02608002e+02,1.50000000e+01]
#   [0.00000000e+00,2.19377594e+01,2.45613823e+01,0.00000000e+00
#    8.75959549e+01,8.71029663e+01,1.50000000e+01]
#   [0.00000000e+00,5.30294380e+01,4.09806061e+01,0.00000000e+00
#    1.11000000e+02,1.02197769e+02,1.50000000e+01]
#   [0.00000000e+00,4.41907883e+01,5.00775833e+01,0.00000000e+00
#    1.11000000e+02,9.56432114e+01,1.50000000e+01]
#   [0.00000000e+00,7.82619858e+00,0.00000000e+00,0.00000000e+00
#    7.34272919e+01,3.78459930e+01,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,1.76495361e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,1.30234528e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,7.73980713e+00,0.00000000e+00
#    1.00975716e+02,1.04654953e+02,1.50000000e+01]
#   [0.00000000e+00,2.30923424e+01,7.31096497e+01,0.00000000e+00
#    8.84156494e+01,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,8.04649353e-01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,5.34402428e+01,5.59609070e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]]

#  [[1.00000000e+00,3.70000000e+01,5.40000000e+01,0.00000000e+00
#    6.80000000e+01,7.80000000e+01,1.50000000e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,7.68982887e+00,5.61869507e+01,3.02975535e+00
#    7.14788513e+01,1.11000000e+02,1.09848309e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,7.68982887e+00,5.61869507e+01,3.02975535e+00
#    7.14788513e+01,1.11000000e+02,1.09848309e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,0.00000000e+00,3.89592896e+01,0.00000000e+00
#    1.00751434e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,7.83471870e+00,2.48761997e+01,5.10852432e+00
#    7.13576965e+01,8.76862869e+01,1.30631294e+01]
#   [1.00000000e+00,7.68982887e+00,5.61869507e+01,3.02975535e+00
#    7.14788513e+01,1.11000000e+02,1.09848309e+01]
#   [1.00000000e+00,7.68982887e+00,5.61869507e+01,3.02975535e+00
#    7.14788513e+01,1.11000000e+02,1.09848309e+01]
#   [1.00000000e+00,7.83471870e+00,2.48761997e+01,5.10852432e+00
#    7.13576965e+01,8.76862869e+01,1.30631294e+01]
#   [1.00000000e+00,7.83471870e+00,2.48761997e+01,5.10852432e+00
#    7.13576965e+01,8.76862869e+01,1.30631294e+01]
#   [1.00000000e+00,7.83471870e+00,2.48761997e+01,5.10852432e+00
#    7.13576965e+01,8.76862869e+01,1.30631294e+01]
#   [1.00000000e+00,7.68982887e+00,5.61869507e+01,3.02975535e+00
#    7.14788513e+01,1.11000000e+02,1.09848309e+01]
#   [1.00000000e+00,3.70000000e+01,5.40000000e+01,0.00000000e+00
#    6.80000000e+01,7.80000000e+01,1.50000000e+01]
#   [1.00000000e+00,7.21479797e+00,6.01556320e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,0.00000000e+00,5.76183472e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,3.65841713e+01,0.00000000e+00,0.00000000e+00
#    7.87085419e+01,6.85495758e+01,1.50000000e+01]
#   [1.00000000e+00,2.71569023e+01,4.86086807e+01,0.00000000e+00
#    1.11000000e+02,9.39305496e+01,1.50000000e+01]
#   [1.00000000e+00,2.28298111e+01,5.58994370e+01,0.00000000e+00
#    8.90033264e+01,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,3.82836685e+01,3.92076416e+01,0.00000000e+00
#    1.04678719e+02,1.01646622e+02,1.50000000e+01]
#   [1.00000000e+00,5.84298706e+00,6.34368515e+00,0.00000000e+00
#    7.16844101e+01,6.81626434e+01,1.50000000e+01]
#   [1.00000000e+00,3.82836685e+01,3.92076416e+01,0.00000000e+00
#    1.04678719e+02,1.01646622e+02,1.50000000e+01]
#   [1.00000000e+00,5.12968445e+00,4.01837463e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [1.00000000e+00,6.82040787e+00,2.42955818e+01,0.00000000e+00
#    7.30874786e+01,8.65759735e+01,1.50000000e+01]
#   [1.00000000e+00,2.26097527e+01,2.41240826e+01,0.00000000e+00
#    8.85701294e+01,8.59856873e+01,1.50000000e+01]
#   [1.00000000e+00,2.12845192e+01,6.65057564e+00,0.00000000e+00
#    8.83742065e+01,6.98036270e+01,1.50000000e+01]
#   [1.00000000e+00,2.80800743e+01,6.52491226e+01,0.00000000e+00
#    1.11000000e+02,1.10647423e+02,1.50000000e+01]
#   [1.00000000e+00,2.80800743e+01,6.52491226e+01,0.00000000e+00
#    1.11000000e+02,1.10647423e+02,1.50000000e+01]
#   [1.00000000e+00,2.03888474e+01,4.18573418e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]]

#  [[2.00000000e+00,2.00000000e+01,2.80000000e+01,0.00000000e+00
#    7.20000000e+01,8.10000000e+01,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,5.17793417e+00
#    1.11000000e+02,1.03945656e+02,1.31144238e+01]
#   [2.00000000e+00,1.77139473e+00,0.00000000e+00,0.00000000e+00
#    4.54959183e+01,6.71057358e+01,8.05300617e+00]
#   [2.00000000e+00,0.00000000e+00,5.68524628e+01,3.12461448e+00
#    5.60701904e+01,1.11000000e+02,1.09826460e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,5.17793417e+00
#    1.11000000e+02,1.03945656e+02,1.31144238e+01]
#   [2.00000000e+00,7.98453140e+00,2.46407318e+01,1.10620594e+01
#    7.19009857e+01,8.81059113e+01,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,1.70430946e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,4.02836227e+01,4.03621902e+01,7.03285789e+00
#    1.03310631e+02,1.04052849e+02,1.48604164e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,7.27657223e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,5.54881058e+01,7.87213802e-01
#    9.43629379e+01,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,6.65309525e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,5.10013676e+00
#    1.11000000e+02,1.11000000e+02,1.29484510e+01]
#   [2.00000000e+00,0.00000000e+00,5.68524628e+01,3.12461448e+00
#    5.60701904e+01,1.11000000e+02,1.09826460e+01]
#   [2.00000000e+00,8.40353203e+00,2.37746601e+01,6.13103008e+00
#    7.06432037e+01,8.76828690e+01,1.40170164e+01]
#   [2.00000000e+00,1.99996567e+00,2.82140770e+01,5.98750877e+00
#    4.57015381e+01,1.11000000e+02,1.41208210e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,8.25013161e-01
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,1.90843697e+01,2.31737232e+01,0.00000000e+00
#    8.75850677e+01,8.55533295e+01,1.50000000e+01]
#   [2.00000000e+00,3.92311859e+00,2.36984444e+01,0.00000000e+00
#    7.22776947e+01,8.53425751e+01,1.50000000e+01]
#   [2.00000000e+00,2.00000000e+01,2.80000000e+01,0.00000000e+00
#    7.20000000e+01,8.10000000e+01,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,2.77313957e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,3.78941574e+01,5.59316025e+01,0.00000000e+00
#    1.04869270e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,2.00357132e+01,4.07636795e+01,0.00000000e+00
#    8.72137985e+01,1.03947365e+02,1.50000000e+01]
#   [2.00000000e+00,2.77104340e+01,6.72862015e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,3.79906693e+01,0.00000000e+00,0.00000000e+00
#    1.03575722e+02,5.29378281e+01,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [2.00000000e+00,5.43655434e+01,9.97545242e+00,0.00000000e+00
#    9.65136566e+01,9.97118683e+01,1.50000000e+01]
#   [2.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    5.71910706e+01,5.38667526e+01,1.50000000e+01]]

#  [[3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]
#    [3.00000000e+00,5.20000000e+01,5.20000000e+01,0.00000000e+00
#     6.10000000e+01,5.90000000e+01,1.50000000e+01]]

#  [[4.00000000e+00,5.40000000e+01,2.10000000e+01,0.00000000e+00
#    9.10000000e+01,8.60000000e+01,1.50000000e+01]
#   [4.00000000e+00,3.70000000e+01,2.60000000e+01,0.00000000e+00
#    8.00000000e+01,8.60000000e+01,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,4.06328487e+00
#    7.00032883e+01,8.86404877e+01,1.19519339e+01]
#   [4.00000000e+00,0.00000000e+00,6.68823242e+00,8.88048887e-01
#    7.25776749e+01,1.11000000e+02,8.82783604e+00]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,6.00909710e+00
#    1.11000000e+02,5.35748215e+01,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,4.11417246e+00
#    1.11000000e+02,1.06620728e+02,1.22052631e+01]
#   [4.00000000e+00,7.19615326e+01,4.17027054e+01,3.08080673e+00
#    1.11000000e+02,1.03876122e+02,1.09064016e+01]
#   [4.00000000e+00,0.00000000e+00,2.41914845e+01,6.08494759e+00
#    5.46350174e+01,8.69545746e+01,1.39361439e+01]
#   [4.00000000e+00,7.97368240e+00,5.75697365e+01,7.98438740e+00
#    7.26648102e+01,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,3.34976768e+01,2.75696754e+01,6.02956629e+00
#    7.72309113e+01,1.11000000e+02,1.40532951e+01]
#   [4.00000000e+00,0.00000000e+00,2.38318939e+01,3.81073904e+00
#    1.00525940e+02,1.11000000e+02,1.18759785e+01]
#   [4.00000000e+00,2.31535587e+01,4.18351135e+01,2.07207227e+00
#    8.61473160e+01,1.03750092e+02,9.92136002e+00]
#   [4.00000000e+00,5.63539581e+01,2.43783436e+01,5.04716301e+00
#    1.11000000e+02,8.71082001e+01,1.29525242e+01]
#   [4.00000000e+00,2.39022503e+01,4.10308723e+01,3.10073066e+00
#    8.77053680e+01,1.04290405e+02,1.09601698e+01]
#   [4.00000000e+00,5.53380814e+01,5.70875549e+01,8.95282173e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,2.38318939e+01,3.81073904e+00
#    1.00525940e+02,1.11000000e+02,1.18759785e+01]
#   [4.00000000e+00,5.57033043e+01,2.41478367e+01,0.00000000e+00
#    1.11000000e+02,8.37796860e+01,1.50000000e+01]
#   [4.00000000e+00,2.35952988e+01,2.44250011e+01,0.00000000e+00
#    8.95765762e+01,8.76213837e+01,1.50000000e+01]
#   [4.00000000e+00,5.40000000e+01,2.10000000e+01,0.00000000e+00
#    9.10000000e+01,8.60000000e+01,1.50000000e+01]
#   [4.00000000e+00,3.70000000e+01,2.60000000e+01,0.00000000e+00
#    8.00000000e+01,8.60000000e+01,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,5.56865311e+00,4.07912445e+01,0.00000000e+00
#    7.07954865e+01,1.03137619e+02,1.50000000e+01]
#   [4.00000000e+00,1.94028931e+01,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,5.94193954e+01,6.56204834e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,2.54860229e+01,4.08096924e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,6.36800385e+00,2.38017559e+01,0.00000000e+00
#    7.18653793e+01,8.67971802e+01,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,4.00666199e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,1.05961838e+01,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,8.99906158e+01,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,2.54701385e+01,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]
#   [4.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00
#    1.11000000e+02,1.11000000e+02,1.50000000e+01]]
